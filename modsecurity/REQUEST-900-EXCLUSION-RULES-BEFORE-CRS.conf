# Definition of a SecDefaultAction 
# These actions have a inheritence structure 
# Defining will result in overriding the default one 
# SecDefaultAction phase:1,pass,nolog,t:none



# Custom Rule for ignoring localhost requests
# Rule will not trigger create any Logs at all
# Engine is switched off for headers that come from the local hosts 
# In order every other rule will explicitly not be applied  
#SecRule REQUEST_HEADERS "@contains localhost" \
#     "id:1000,\
#     phase:1,\
#     pass,\
#     nolog,\
#     ctl:ruleEngine=Off"



# Custom Rule for ignoring localhost requests 
# Although the rule will automically log into the Auditlog but not into the Error Log of Apache
# Engine is switched off for headers that come from the local hosts 
# In order every other rule will explicitly not be applied  
#SecRule REQUEST_HEADERS "@contains localhost" \
#     "id:1000,\
#     phase:1,\
#     pass,\
#     auditlog,\
#     msg:'MILS Custom Rules'\
#     ctl:ruleEngine=Off"



# Custom Rule for ignoring localhost requests
# Although the rule will automically log into the Auditlog but not into the Error Log of Apache
# Engine is switched to DetectionOnly Mode for this type of requests 
# It will result into the circumstances that requests will not be blocked but following rules will create a log for them
#SecRule REQUEST_HEADERS "@contains localhost" \
#     "id:1000,\
#     phase:1,\
#     pass,\
#     auditlog,\
#     msg:'MILS Custom Rules',\
#     ctl:ruleEngine=DetectionOnly"



# Custom Rule for detecting this special kind of request 
# Does not match blindly trust every request of localhost and instead matches SQLI Patterns 
# The Phase of detection has to be changed in order to be able to inspect the request body 
# The Engine will stay the same afterwads 
#SecRule ARGS:email "@rx ' or 1=1; --" \
#     "id:1000,\
#     phase:2,\
#     pass,\
#     auditlog,\
#     msg:'MILS Custom Rules',\
#     ctl:ruleEngine=DetectionOnly"



